import inspect, os, shutil

from django.test import TestCase, Client
from django.core.files import File
from django.core.urlresolvers import reverse

from raster.models import RasterLayer, LegendSemantics, LegendEntry, Legend
from django.test.utils import override_settings

@override_settings(RASTER_TILE_CACHE_TIMEOUT=0)
class RasterTmsTests(TestCase):

    def setUp(self):
        # Instantiate Django file instances with nodes and links
        self.pwd = os.path.dirname(os.path.abspath(
            inspect.getfile(inspect.currentframe())))

        sourcefile = File(open(os.path.join(self.pwd, 'raster.tif.zip')))

        # Create legend
        sem1 = LegendSemantics.objects.create(name='Earth')
        ent1 = LegendEntry.objects.create(semantics=sem1, expression='4', color='#123456')
        leg = Legend.objects.create(title='MyLegend')
        leg.entries.add(ent1)

        # Create network with csv data attached
        self.rasterlayer = RasterLayer.objects.create(
            name='Raster data',
            description='Small raster for testing',
            datatype='ca',
            srid='3086',
            nodata='0',
            rasterfile=sourcefile,
            legend=leg)

        self.tile = self.rasterlayer.rastertile_set.filter(is_base=False).first()
        self.tile_url = url = reverse('tms', kwargs={'z': self.tile.tilez, 'y': self.tile.tiley, 'x': self.tile.tilex, 'layer': 'raster.tif', 'format': '.png'})

        self.client = Client()

    def tearDown(self):
        shutil.rmtree(os.path.dirname(os.path.join(
            self.pwd, '../..', self.rasterlayer.rasterfile.name)))
        self.rasterlayer.rastertile_set.all().delete()

    def test_tms_nonexisting_layer(self):
        url = reverse('tms', kwargs={'z': 0, 'y': 0, 'x': 0, 'layer': 'raster_nonexistent.tif', 'format': '.png'})
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_tms_nonexisting_tile(self):
        url = reverse('tms', kwargs={'z': 100, 'y': 0, 'x': 0, 'layer': 'raster.tif', 'format': '.png'})
        response = self.client.get(url)
        self.assertEqual(response['Content-type'], 'PNG')
        self.assertEqual(response.content, '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x01\x15IDATx\x9c\xed\xc11\x01\x00\x00\x00\xc2\xa0\xf5O\xedk\x08\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x03\x01<\x00\x01<\xedS\t\x00\x00\x00\x00IEND\xaeB`\x82')

    def test_tms_existing_tile(self):
        leg = self.rasterlayer.legend
        self.rasterlayer.legend = None
        self.rasterlayer.save()

        # Get tms tile for layer without legend
        response = self.client.get(self.tile_url)
        self.assertEqual(response['Content-type'], 'PNG')
        self.assertEqual(response.content, '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x01\x15IDATx\x9c\xed\xc11\x01\x00\x00\x00\xc2\xa0\xf5O\xedk\x08\xa0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x03\x01<\x00\x01<\xedS\t\x00\x00\x00\x00IEND\xaeB`\x82')

        self.rasterlayer.legend = leg
        self.rasterlayer.save()

        # Get tms tile rendered with legend
        response = self.client.get(self.tile_url)
        self.assertEqual(response['Content-type'], 'PNG')
        self.assertEqual(response.content, '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x06\x82IDATx\x9c\xed\xdd\xd1U\xe48\x10\x05\xd0f\xcfF@,\xc4B\x90\xc4B,\xa4\xc0~\xf5Y\x8f\xc7nI\xb6lI\xa5{\xfffh\xba\r\x07=WI\xb6\xfcx\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xe1\xad\xf5\x01@-\xef\x1f\x9f\xbf\xaf\xbe\xfe\xf3\xfdu\xf9\xdf{\xea\x18Z\xfa\xf9\xfez[\x1f\xdf?\xad\x0e\x06\xee\xf2\xf3\xfd\xf5vv\xf0\xaf\x07\xce\xfb\xc7\xe7o\xcf\x83=\x97\x00\x80\x89\t\x00B\xabY\xf6\xa7\xce\xfa#V\x04\x02\x80\x10\xee\x18|\xcfVb\xf9Y#\x0e\xfa\xa5\x7f[\x1f\x00p\xcc\xba\xbaY\x86\xd1\xf3k\xa9\x80\x12\x00\x84T\xab\xf4\x7f\x0e\xa0\xf5\xfb-\xff\xddK\x15\xb0\x1c\xf4\xb9\xc7$\x00 \xd3V\x18\xbc\x7f|\xfe\xe6\x9em{d\x0e\x00\x06U#pT\x00\xf0\xc2^+\x11e"P\x00\x10\xd2^\xef~\xe6\xfdF.\xf5\xf7h\x01 \x98\x9c\xaa\xe5I\x05\xc0\xd0\xb6\xfe\xa8\xb7\xaey_\xbfv\xfd\x9a\xd4\xa0\xb9\xe3>\x82RG\x8ei\xfd=\x02\x80\x90\x96\xe5\xfa\xde@\xd9Z\xca\xdb\x9b\xe1_\xbe&\x12-\x00\x04S\x12T*\x00\xc2\xc99s\xaf_S\xd27G"\x00\x98\xca\xd6@\xdf\x0b\x8c\xe8\xe5\xff\xe3!\x00`85\'$\x05\x00\xa1\xad\xcf\xe2[g\xf7W\x03\xea\xcc\x99\x7fo5\xe2\x8c\xda\xab\x11&\x01\tg\xaft\xdf\n\x83\xa8\xa5}.\x01\x00\x13\xd3\x020\x95T\t]\xf3\x1a\xff\x16\xd5E\xe9g\n\x00\x86\x95\xfb\xc7^r5\xdf\xd1\x99\xffQ\xef\x13\x10\x00\x843\xda lI\x000\x95\xd4\xf5\xffG\xcf\xfa\xadB\xe7\xec\xe7\n\x00\xc2yU\xea\xa7.\xf8I\xbdo\x94}\x00\x9e\xac\x02\x10\xc2\xd6\x06\x99\x11\x06\xe8\xd5T\x00L\xab\xe4\xcc\xbf\xf5\x7fw\x06\xcc\xd9veOw\xf78C\xaeW\x03 g\xb9/\'\x00z\xd9\t\xe8\xd5\x16\xe0g\xdeG\x0b@H\xa9\x16\xa0\xc7\r>Z\xd0\x02\xc0\x86\x9e&\xfbj?\xdel\xf9o\x01@x9[\x7f\xed\xbd\xbeG5\x8fO\x000\x9c\x9c\x01\xa0\xc4\xcf#\x00\xa0\x81\x92{\x12\xae$\x00\x08\xe9\xc8\x00\xea\xb5\xf4\xcf]\xb18B\x00\x10\xcer\x8d^+\xf0\x9a\x00\x80\x029\xdb\x8d\xa7\x1c\xb9\xdf`\xfd\x7f%\xcf4xE\x00\x10\xce\x91\xc1Yzk\xf1Y5\xdb\x8d3\xd5\x8e\x00`X5\xca\xfb^\xfb\xfe\xbb\x08\x00h\xe0\xecF\xa4\xb5.O\x16\x00\x0ck\xfd\xc7\x7f\xf7\x84\xdf\x99\xd2\xfb\x8aI\xca\xd2\x0b\x9e\x1e\x0f\x01\xc0\xe0Jo\xe8\xe1O\x02\x00n\x90S\xaa\xd7\xachr[\x03\xa9\xc8p\xf6\x1e\t^\xfb=s\x9dy\x84\xd8\xd6\xbe\x02W\xad`lq;0C\xd9\xfbc_\xff\xbf\x07\x7f\xe4\x11\x00\xd0P\xeb\x80\xd2\x020\x94\xbd\x01\x13\xe9\x9a\x80;[\x00\x93\x80\x84P2/p\xe5@\xbf{\xaf\xc0\xb3\x04\x00T\x96\xda\xc03\x15\x12\xa5\xeb\xf9%AgO@\xa6\xd0\xfb\xba\x7f/\xc7\'\x00\x98\xca\x9d\xe5\xf9\x15\xcb\x95\xb5i\x01\xe0B[\xcb\x93W}\xc6:\\r\xaeO\x10\x00\x0c\xad\xd6\x19\xb5\x97\xc9\xbb\xbb\x8fC\x000\xb4#7\xc0\xa4\xdeg&\x02\x00n\x94\xba\x8d\xb74\x88\xce>\xbf@\x000\xbc\xde&\xd6\x8e8z\x7f\x7fi\xcb\xe0\xc1 \x84P\xfa\xec\xbf\xd6\xb3\xff-\x8e#\x87e@h\xecy\x16o\x11\x1c*\x00\xc2\xd8[r\xeb\xb5E\xc8)\xfb\xb7z\xfc\x9a?\x8f\x00`\x18\xad\x1e\tV\xd2J\x9c\xe9\xc7[\x10\x00\xd0\x91\xbb\x1fj"\x00\x08c=`j\x9ca\xf7\x06\xe1U\x13\x8cw\xef_(\x00\x18N\xaf=}\xa9\x1e~\x0e\xab\x0001\x15\x00\xa1\xd4\x9eX\xdb\xbb\xd4\xf8\xd5\x9d~=L\xee\xe5\x12\x00\x0c\xa9\xc5 \xab\xb1\x02\xd0C\xd9\xbf$\x00\x18^j\x07\x1e\xf6\x99\x03 \xa4\xde\xce\xb4\xbd\x12\x00\x0c\xe9\xe7\xfb\xeb-\xf7\x01\x9bg\xc3 \xf5Y%z{^\x81\x16\x80al\rBg\xfas\x04\x00$\xf4r\xb6\xbe\x82\x00 \xbc\x9e\x06p\xcdV\xa2\xc6\xfb\t\x00\x86\xe3q\xdf\xff;\x12n\xcb\xdf\x9dI@\x98\x98\x00\x80\x95\x9e\xaa\x8b\xabW\r\xb4\x000\x89\xadK\x95\x05\x00Lb\xab\x8a\x10\x00\x0c\xef\xca\x1b\x80Z\xb8\xf3\x91b\xe6\x00\x18ROW\xd3\x8dL\x05\x00\x03\xb8*\xecT\x00\x0c\xa7\xa7Y\xfa\xd1\t\x00\x86W\xf3f\x9d\xd9\x08\x00\x98\x989\x00\x866\xf2e\xc1wLb\xa66K\x11\x00\x84q\xc5\xb6\xe0\xd1i\x01`b\x02\x80\x90\x9c\xfd\xf3h\x01\x18Rj\x0b\xeeV\x8f\x06\x1f\x8d\n\x00\x82\xca\x99\x1cU\x010\xbc\xb3\x1b\x80\xb6z\xa0\xc7\xde\xb1\xdey\x1c\x02\x80\xf0^\xb5\x03\xcb\xaf\xcd\xb8\x8a\xa0\x05\x80\x89\xa9\x00\x18^n\xd9\xdf\xf3\x19=\xf7\xd8\xce\xb4+\xf6\x03 \x9c\x92\x9e\x7f9xF\xbdz\xb06\x01\x007:;ay\xf4\x01\xa4{\xdf\'\x05\x19^\xee\xa0\xca\xd9K\xff\xce6\xc1*\x00\xdcH\xd9\xff7\xab\x0001\x15\x00a\x1c]\r\xb8\xa22H]\x8a\xfc\xf3\xfd\xf5V:\x1f\x90\xd32\xac\xdf7u<*\x00\xc2(]J\xdb\xfb\xda\xd1@x~\xefH\xad\x86\x00\x80\x06z\xb9&a\x98\xa4\x82\x94\x92\'\xe6\xe6\x94\xdf\xadV\x04\xae\xf8\\-\x00\xd3(}f\xc0\xcc\xcf\x18\x10\x00\x840\xeb\x00>K\x0b@(\xa53\xeb\xbd\x04G\xab\rL,\x03\x12\xceH\x03\xff\xa9\xd5\xfd\tZ\x00\x98\x98\x16\x80Pr.\xf2\xe9\xed\xec\xffx\xec_\xc0s5\x15\x00\xa1\x8ct\x11N\x0f\x04\x00\x0c\xe2\x8ap\x13\x00L\xa7\xc7*!\xa7\xfc\xbf\xa2E\xe8\xee\x17\x01g\xa5n\x86I\xbdv&*\x00\xc2\x19\xed\x86\x9c\xbb-\x7f?\x02\x00&\xb2\xdeTT\x000\x85\xd9K\xfd=\x02\x80\xb0\xb4\x01i\x02\x80i\xcc|\xd7\xdf\x1e\x01\xc04\xb6&\x07g\xaf\x12\x04\x00\xa1Y\x11x\xcd\xdd\x80L/Z@\x94\xb49\x02\x006\xdc5W\xb0\xf5\xb8\xb2;\xe7)\xb4\x00L\xe1y\xb7\x9dI\xc0?\t\x00\x18\xdc\x99\x16F\x0b\x00\r-+\x923\xd5\xc9\xd1\xf6A\x05\xc04\x9e+\x02Q\xdb\x80#?\x97\x00\x80\r\xd1V\x06\xf6L\xf1C\xc2R\x8f;\x07\xafw\x05\xbej\x97`7\x031\xbd\xd2\xc1\x15\xb5\x1a\xf8\xf9\xfez\xfb\x0f\x01\x1d\xe2\xb5\xb1\x9c|y\x00\x00\x00\x00IEND\xaeB`\x82')

    def test_tms_legend_query_arg(self):
        # Create other legend
        sem2 = LegendSemantics.objects.create(name='Water')
        ent2 = LegendEntry.objects.create(semantics=sem2, expression='4', color='#654321')
        leg2 = Legend.objects.create(title='Other')
        leg2.entries.add(ent2)
        response = self.client.get(self.tile_url + '?legend=other')
        self.assertEqual(response['Content-type'], 'PNG')
        self.assertEqual(response.content, '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x06\x82IDATx\x9c\xed\xdd\xd1U\xe48\x10\x05\xd0f\xcf&B,\xc4BT\xc4B,\x84\xc2~\xf5Y\x8f\xc7nI\xb6lI\xa5{\xfffh\xba\r\x07=WI\xb6\xfcx\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xe1\xad\xf5\x01@-\x9f\x1f\xef\xbf\xaf\xbe\xfe\xf5\xfds\xf9\xdf{\xea\x18Z\xfa\xfa\xfey[\x1f\xdf?\xad\x0e\x06\xee\xf2\xf5\xfd\xf3vv\xf0\xaf\x07\xce\xe7\xc7\xfbo\xcf\x83=\x97\x00\x80\x89\t\x00B\xabY\xf6\xa7\xce\xfa#V\x04\x02\x80\x10\xee\x18|\xcfVb\xf9Y#\x0e\xfa\xa5\x7f[\x1f\x00p\xcc\xba\xbaY\x86\xd1\xf3k\xa9\x80\x12\x00\x84T\xab\xf4\x7f\x0e\xa0\xf5\xfb-\xff\xddK\x15\xb0\x1c\xf4\xb9\xc7$\x00 \xd3V\x18|~\xbc\xff\xe6\x9em{d\x0e\x00\x06U#pT\x00\xf0\xc2^+\x11e"P\x00\x10\xd2^\xef~\xe6\xfdF.\xf5\xf7h\x01 \x98\x9c\xaa\xe5I\x05\xc0\xd0\xb6\xfe\xa8\xb7\xaey_\xbfv\xfd\x9a\xd4\xa0\xb9\xe3>\x82RG\x8ei\xfd=\x02\x80\x90\x96\xe5\xfa\xde@\xd9Z\xca\xdb\x9b\xe1_\xbe&\x12-\x00\x04S\x12T*\x00\xc2\xc99s\xaf_S\xd27G"\x00\x98\xca\xd6@\xdf\x0b\x8c\xe8\xe5\xff\xe3!\x00`85\'$\x05\x00\xa1\xad\xcf\xe2[g\xf7W\x03\xea\xcc\x99\x7fo5\xe2\x8c\xda\xab\x11&\x01\tg\xaft\xdf\n\x83\xa8\xa5}.\x01\x00\x13\xd3\x020\x95T\t]\xf3\x1a\xff\x16\xd5E\xe9g\n\x00\x86\x95\xfb\xc7^r5\xdf\xd1\x99\xffQ\xef\x13\x10\x00\x843\xda lI\x000\x95\xd4\xf5\xffG\xcf\xfa\xadB\xe7\xec\xe7\n\x00\xc2yU\xea\xa7.\xf8I\xbdo\x94}\x00\x9e\xac\x02\x10\xc2\xd6\x06\x99\x11\x06\xe8\xd5T\x00L\xab\xe4\xcc\xbf\xf5\x7fw\x06\xcc\xd9veOw\xf78C\xaeW\x03 g\xb9/\'\x00z\xd9\t\xe8\xd5\x16\xe0g\xdeG\x0b@H\xa9\x16\xa0\xc7\r>Z\xd0\x02\xc0\x86\x9e&\xfbj?\xdel\xf9o\x01@x9[\x7f\xed\xbd\xbeG5\x8fO\x000\x9c\x9c\x01\xa0\xc4\xcf#\x00\xa0\x81\x92{\x12\xae$\x00\x08\xe9\xc8\x00\xea\xb5\xf4\xcf]\xb18B\x00\x10\xcer\x8d^+\xf0\x9a\x00\x80\x029\xdb\x8d\xa7\x1c\xb9\xdf`\xfd\x7f%\xcf4xE\x00\x10\xce\x91\xc1Yzk\xf1Y5\xdb\x8d3\xd5\x8e\x00`X5\xca\xfb^\xfb\xfe\xbb\x08\x00h\xe0\xecF\xa4\xb5.O\x16\x00\x0ck\xfd\xc7\x7f\xf7\x84\xdf\x99\xd2\xfb\x8aI\xca\xd2\x0b\x9e\x1e\x0f\x01\xc0\xe0Jo\xe8\xe1O\x02\x00n\x90S\xaa\xd7\xachr[\x03\xa9\xc8p\xf6\x1e\t^\xfb=s\x9dy\x84\xd8\xd6\xbe\x02W\xad`lq;0C\xd9\xfbc_\xff\xbf\x07\x7f\xe4\x11\x00\xd0P\xeb\x80\xd2\x020\x94\xbd\x01\x13\xe9\x9a\x80;[\x00\x93\x80\x84P2/p\xe5@\xbf{\xaf\xc0\xb3\x04\x00T\x96\xda\xc03\x15\x12\xa5\xeb\xf9%AgO@\xa6\xd0\xfb\xba\x7f/\xc7\'\x00\x98\xca\x9d\xe5\xf9\x15\xcb\x95\xb5i\x01\xe0B[\xcb\x93W}\xc6:\\r\xaeO\x10\x00\x0c\xad\xd6\x19\xb5\x97\xc9\xbb\xbb\x8fC\x000\xb4#7\xc0\xa4\xdeg&\x02\x00n\x94\xba\x8d\xb74\x88\xce>\xbf@\x000\xbc\xde&\xd6\x8e8z\x7f\x7fi\xcb\xe0\xc1 \x84P\xfa\xec\xbf\xd6\xb3\xff-\x8e#\x87e@h\xecy\x16o\x11\x1c*\x00\xc2\xd8[r\xeb\xb5E\xc8)\xfb\xb7z\xfc\x9a?\x8f\x00`\x18\xad\x1e\tV\xd2J\x9c\xe9\xc7[\x10\x00\xd0\x91\xbb\x1fj"\x00\x08c=`j\x9ca\xf7\x06\xe1U\x13\x8cw\xef_(\x00\x18N\xaf=}\xa9\x1e~\x0e\xab\x0001\x15\x00\xa1\xd4\x9eX\xdb\xbb\xd4\xf8\xd5\x9d~=L\xee\xe5\x12\x00\x0c\xa9\xc5 \xab\xb1\x02\xd0C\xd9\xbf$\x00\x18^j\x07\x1e\xf6\x99\x03 \xa4\xde\xce\xb4\xbd\x12\x00\x0c\xe9\xeb\xfb\xe7-\xf7\x01\x9bg\xc3 \xf5Y%z{^\x81\x16\x80al\rBg\xfas\x04\x00$\xf4r\xb6\xbe\x82\x00 \xbc\x9e\x06p\xcdV\xa2\xc6\xfb\t\x00\x86\xe3q\xdf\xff;\x12n\xcb\xdf\x9dI@\x98\x98\x00\x80\x95\x9e\xaa\x8b\xabW\r\xb4\x000\x89\xadK\x95\x05\x00Lb\xab\x8a\x10\x00\x0c\xef\xca\x1b\x80Z\xb8\xf3\x91b\xe6\x00\x18ROW\xd3\x8dL\x05\x00\x03\xb8*\xecT\x00\x0c\xa7\xa7Y\xfa\xd1\t\x00\x86W\xf3f\x9d\xd9\x08\x00\x98\x989\x00\x866\xf2e\xc1wLb\xa66K\x11\x00\x84q\xc5\xb6\xe0\xd1i\x01`b\x02\x80\x90\x9c\xfd\xf3h\x01\x18Rj\x0b\xeeV\x8f\x06\x1f\x8d\n\x00\x82\xca\x99\x1cU\x010\xbc\xb3\x1b\x80\xb6z\xa0\xc7\xde\xb1\xdey\x1c\x02\x80\xf0^\xb5\x03\xcb\xaf\xcd\xb8\x8a\xa0\x05\x80\x89\xa9\x00\x18^n\xd9\xdf\xf3\x19=\xf7\xd8\xce\xb4+\xf6\x03 \x9c\x92\x9e\x7f9xF\xbdz\xb06\x01\x007:;ay\xf4\x01\xa4{\xdf\'\x05\x19^\xee\xa0\xca\xd9K\xff\xce6\xc1*\x00\xdcH\xd9\xff7\xab\x0001\x15\x00a\x1c]\r\xb8\xa22H]\x8a\xfc\xf5\xfd\xf3V:\x1f\x90\xd32\xac\xdf7u<*\x00\xc2(]J\xdb\xfb\xda\xd1@x~\xefH\xad\x86\x00\x80\x06z\xb9&a\x98\xa4\x82\x94\x92\'\xe6\xe6\x94\xdf\xadV\x04\xae\xf8\\-\x00\xd3(}f\xc0\xcc\xcf\x18\x10\x00\x840\xeb\x00>K\x0b@(\xa53\xeb\xbd\x04G\xab\rL,\x03\x12\xceH\x03\xff\xa9\xd5\xfd\tZ\x00\x98\x98\x16\x80Pr.\xf2\xe9\xed\xec\xffx\xec_\xc0s5\x15\x00\xa1\x8ct\x11N\x0f\x04\x00\x0c\xe2\x8ap\x13\x00L\xa7\xc7*!\xa7\xfc\xbf\xa2E\xe8\xee\x17\x01g\xa5n\x86I\xbdv&*\x00\xc2\x19\xed\x86\x9c\xbb-\x7f?\x02\x00&\xb2\xdeTT\x000\x85\xd9K\xfd=\x02\x80\xb0\xb4\x01i\x02\x80i\xcc|\xd7\xdf\x1e\x01\xc04\xb6&\x07g\xaf\x12\x04\x00\xa1Y\x11x\xcd\xdd\x80L/Z@\x94\xb49\x02\x006\xdc5W\xb0\xf5\xb8\xb2;\xe7)\xb4\x00L\xe1y\xb7\x9dI\xc0?\t\x00\x18\xdc\x99\x16F\x0b\x00\r-+\x923\xd5\xc9\xd1\xf6A\x05\xc04\x9e+\x02Q\xdb\x80#?\x97\x00\x80\r\xd1V\x06\xf6L\xf1C\xc2R\x8f;\x07\xafw\x05\xbej\x97`7\x031\xbd\xd2\xc1\x15\xb5\x1a\xf8\xfa\xfey\xfb\x0f\xc6\xe1\xeaD/<\xe3\x0b\x00\x00\x00\x00IEND\xaeB`\x82')

    def test_tms_entries_query_arg(self):
        # Create other legend
        sem2 = LegendSemantics.objects.create(name='Bla')
        ent2 = LegendEntry.objects.create(semantics=sem2, expression='4', color='#654321')
        ent3 = LegendEntry.objects.create(semantics=sem2, expression='5', color='#123456')
        leg2 = Legend.objects.create(title='Dual')
        leg2.entries.add(ent2, ent3)
        response = self.client.get(self.tile_url + '?entries=4&legend=dual')
        self.assertEqual(response['Content-type'], 'PNG')
        self.assertEqual(response.content, '\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x01\x00\x00\x00\x01\x00\x08\x06\x00\x00\x00\\r\xa8f\x00\x00\x06\x82IDATx\x9c\xed\xdd\xd1U\xe48\x10\x05\xd0f\xcf&B,\xc4BT\xc4B,\x84\xc2~\xf5Y\x8f\xc7nI\xb6lI\xa5{\xfffh\xba\r\x07=WI\xb6\xfcx\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf4\xe1\xad\xf5\x01@-\x9f\x1f\xef\xbf\xaf\xbe\xfe\xf5\xfds\xf9\xdf{\xea\x18Z\xfa\xfa\xfey[\x1f\xdf?\xad\x0e\x06\xee\xf2\xf5\xfd\xf3vv\xf0\xaf\x07\xce\xe7\xc7\xfbo\xcf\x83=\x97\x00\x80\x89\t\x00B\xabY\xf6\xa7\xce\xfa#V\x04\x02\x80\x10\xee\x18|\xcfVb\xf9Y#\x0e\xfa\xa5\x7f[\x1f\x00p\xcc\xba\xbaY\x86\xd1\xf3k\xa9\x80\x12\x00\x84T\xab\xf4\x7f\x0e\xa0\xf5\xfb-\xff\xddK\x15\xb0\x1c\xf4\xb9\xc7$\x00 \xd3V\x18|~\xbc\xff\xe6\x9em{d\x0e\x00\x06U#pT\x00\xf0\xc2^+\x11e"P\x00\x10\xd2^\xef~\xe6\xfdF.\xf5\xf7h\x01 \x98\x9c\xaa\xe5I\x05\xc0\xd0\xb6\xfe\xa8\xb7\xaey_\xbfv\xfd\x9a\xd4\xa0\xb9\xe3>\x82RG\x8ei\xfd=\x02\x80\x90\x96\xe5\xfa\xde@\xd9Z\xca\xdb\x9b\xe1_\xbe&\x12-\x00\x04S\x12T*\x00\xc2\xc99s\xaf_S\xd27G"\x00\x98\xca\xd6@\xdf\x0b\x8c\xe8\xe5\xff\xe3!\x00`85\'$\x05\x00\xa1\xad\xcf\xe2[g\xf7W\x03\xea\xcc\x99\x7fo5\xe2\x8c\xda\xab\x11&\x01\tg\xaft\xdf\n\x83\xa8\xa5}.\x01\x00\x13\xd3\x020\x95T\t]\xf3\x1a\xff\x16\xd5E\xe9g\n\x00\x86\x95\xfb\xc7^r5\xdf\xd1\x99\xffQ\xef\x13\x10\x00\x843\xda lI\x000\x95\xd4\xf5\xffG\xcf\xfa\xadB\xe7\xec\xe7\n\x00\xc2yU\xea\xa7.\xf8I\xbdo\x94}\x00\x9e\xac\x02\x10\xc2\xd6\x06\x99\x11\x06\xe8\xd5T\x00L\xab\xe4\xcc\xbf\xf5\x7fw\x06\xcc\xd9veOw\xf78C\xaeW\x03 g\xb9/\'\x00z\xd9\t\xe8\xd5\x16\xe0g\xdeG\x0b@H\xa9\x16\xa0\xc7\r>Z\xd0\x02\xc0\x86\x9e&\xfbj?\xdel\xf9o\x01@x9[\x7f\xed\xbd\xbeG5\x8fO\x000\x9c\x9c\x01\xa0\xc4\xcf#\x00\xa0\x81\x92{\x12\xae$\x00\x08\xe9\xc8\x00\xea\xb5\xf4\xcf]\xb18B\x00\x10\xcer\x8d^+\xf0\x9a\x00\x80\x029\xdb\x8d\xa7\x1c\xb9\xdf`\xfd\x7f%\xcf4xE\x00\x10\xce\x91\xc1Yzk\xf1Y5\xdb\x8d3\xd5\x8e\x00`X5\xca\xfb^\xfb\xfe\xbb\x08\x00h\xe0\xecF\xa4\xb5.O\x16\x00\x0ck\xfd\xc7\x7f\xf7\x84\xdf\x99\xd2\xfb\x8aI\xca\xd2\x0b\x9e\x1e\x0f\x01\xc0\xe0Jo\xe8\xe1O\x02\x00n\x90S\xaa\xd7\xachr[\x03\xa9\xc8p\xf6\x1e\t^\xfb=s\x9dy\x84\xd8\xd6\xbe\x02W\xad`lq;0C\xd9\xfbc_\xff\xbf\x07\x7f\xe4\x11\x00\xd0P\xeb\x80\xd2\x020\x94\xbd\x01\x13\xe9\x9a\x80;[\x00\x93\x80\x84P2/p\xe5@\xbf{\xaf\xc0\xb3\x04\x00T\x96\xda\xc03\x15\x12\xa5\xeb\xf9%AgO@\xa6\xd0\xfb\xba\x7f/\xc7\'\x00\x98\xca\x9d\xe5\xf9\x15\xcb\x95\xb5i\x01\xe0B[\xcb\x93W}\xc6:\\r\xaeO\x10\x00\x0c\xad\xd6\x19\xb5\x97\xc9\xbb\xbb\x8fC\x000\xb4#7\xc0\xa4\xdeg&\x02\x00n\x94\xba\x8d\xb74\x88\xce>\xbf@\x000\xbc\xde&\xd6\x8e8z\x7f\x7fi\xcb\xe0\xc1 \x84P\xfa\xec\xbf\xd6\xb3\xff-\x8e#\x87e@h\xecy\x16o\x11\x1c*\x00\xc2\xd8[r\xeb\xb5E\xc8)\xfb\xb7z\xfc\x9a?\x8f\x00`\x18\xad\x1e\tV\xd2J\x9c\xe9\xc7[\x10\x00\xd0\x91\xbb\x1fj"\x00\x08c=`j\x9ca\xf7\x06\xe1U\x13\x8cw\xef_(\x00\x18N\xaf=}\xa9\x1e~\x0e\xab\x0001\x15\x00\xa1\xd4\x9eX\xdb\xbb\xd4\xf8\xd5\x9d~=L\xee\xe5\x12\x00\x0c\xa9\xc5 \xab\xb1\x02\xd0C\xd9\xbf$\x00\x18^j\x07\x1e\xf6\x99\x03 \xa4\xde\xce\xb4\xbd\x12\x00\x0c\xe9\xeb\xfb\xe7-\xf7\x01\x9bg\xc3 \xf5Y%z{^\x81\x16\x80al\rBg\xfas\x04\x00$\xf4r\xb6\xbe\x82\x00 \xbc\x9e\x06p\xcdV\xa2\xc6\xfb\t\x00\x86\xe3q\xdf\xff;\x12n\xcb\xdf\x9dI@\x98\x98\x00\x80\x95\x9e\xaa\x8b\xabW\r\xb4\x000\x89\xadK\x95\x05\x00Lb\xab\x8a\x10\x00\x0c\xef\xca\x1b\x80Z\xb8\xf3\x91b\xe6\x00\x18ROW\xd3\x8dL\x05\x00\x03\xb8*\xecT\x00\x0c\xa7\xa7Y\xfa\xd1\t\x00\x86W\xf3f\x9d\xd9\x08\x00\x98\x989\x00\x866\xf2e\xc1wLb\xa66K\x11\x00\x84q\xc5\xb6\xe0\xd1i\x01`b\x02\x80\x90\x9c\xfd\xf3h\x01\x18Rj\x0b\xeeV\x8f\x06\x1f\x8d\n\x00\x82\xca\x99\x1cU\x010\xbc\xb3\x1b\x80\xb6z\xa0\xc7\xde\xb1\xdey\x1c\x02\x80\xf0^\xb5\x03\xcb\xaf\xcd\xb8\x8a\xa0\x05\x80\x89\xa9\x00\x18^n\xd9\xdf\xf3\x19=\xf7\xd8\xce\xb4+\xf6\x03 \x9c\x92\x9e\x7f9xF\xbdz\xb06\x01\x007:;ay\xf4\x01\xa4{\xdf\'\x05\x19^\xee\xa0\xca\xd9K\xff\xce6\xc1*\x00\xdcH\xd9\xff7\xab\x0001\x15\x00a\x1c]\r\xb8\xa22H]\x8a\xfc\xf5\xfd\xf3V:\x1f\x90\xd32\xac\xdf7u<*\x00\xc2(]J\xdb\xfb\xda\xd1@x~\xefH\xad\x86\x00\x80\x06z\xb9&a\x98\xa4\x82\x94\x92\'\xe6\xe6\x94\xdf\xadV\x04\xae\xf8\\-\x00\xd3(}f\xc0\xcc\xcf\x18\x10\x00\x840\xeb\x00>K\x0b@(\xa53\xeb\xbd\x04G\xab\rL,\x03\x12\xceH\x03\xff\xa9\xd5\xfd\tZ\x00\x98\x98\x16\x80Pr.\xf2\xe9\xed\xec\xffx\xec_\xc0s5\x15\x00\xa1\x8ct\x11N\x0f\x04\x00\x0c\xe2\x8ap\x13\x00L\xa7\xc7*!\xa7\xfc\xbf\xa2E\xe8\xee\x17\x01g\xa5n\x86I\xbdv&*\x00\xc2\x19\xed\x86\x9c\xbb-\x7f?\x02\x00&\xb2\xdeTT\x000\x85\xd9K\xfd=\x02\x80\xb0\xb4\x01i\x02\x80i\xcc|\xd7\xdf\x1e\x01\xc04\xb6&\x07g\xaf\x12\x04\x00\xa1Y\x11x\xcd\xdd\x80L/Z@\x94\xb49\x02\x006\xdc5W\xb0\xf5\xb8\xb2;\xe7)\xb4\x00L\xe1y\xb7\x9dI\xc0?\t\x00\x18\xdc\x99\x16F\x0b\x00\r-+\x923\xd5\xc9\xd1\xf6A\x05\xc04\x9e+\x02Q\xdb\x80#?\x97\x00\x80\r\xd1V\x06\xf6L\xf1C\xc2R\x8f;\x07\xafw\x05\xbej\x97`7\x031\xbd\xd2\xc1\x15\xb5\x1a\xf8\xfa\xfey\xfb\x0f\xc6\xe1\xeaD/<\xe3\x0b\x00\x00\x00\x00IEND\xaeB`\x82')

    def test_tms_legend_url_from_layer(self):
        url = reverse('legend', kwargs={'layer_or_legend_name': 'raster.tif'})
        response = self.client.get(url)
        self.assertEqual(response.content, '[{"color": "#123456", "expression": "4", "name": "Earth"}]')

    def test_tms_legend_url_error(self):
        url = reverse('legend', kwargs={'layer_or_legend_name': 'raster_does_not_exist.tif'})
        response = self.client.get(url)
        self.assertEqual(response.status_code, 404)

    def test_tms_legend_url_from_layer(self):
        url = reverse('legend', kwargs={'layer_or_legend_name': 'MyLegend'})
        response = self.client.get(url)
        self.assertEqual(response.content, '[{"color": "#123456", "expression": "4", "name": "Earth"}]')
